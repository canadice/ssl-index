---
title: "New Transfer Value"
format: pdf
header-includes:
- \usepackage{float}
- \usepackage{caption}
- \usepackage{multirow}
- \renewcommand{\and}{\\}
editor_options: 
  chunk_output_type: console
  
---
```{r setup, include=FALSE}

require(googlesheets4)
require(tidyverse)
require(knitr)
require(kableExtra)

gs4_deauth()

sheet <- 
  read_sheet(
    ss = "https://docs.google.com/spreadsheets/d/1H5741Pd87jEuGT80apzCdcy41Io56i2VB74ReyO14eM/edit#gid=1763667801",
    sheet = "TPE Projections [CURRENT]",
    range = "A2:R23"
  ) %>% 
  select(
    TPE,
    Age = Season,
    `Earned TPE`,
    Salary = `Minimum salary`,
    Regression,
    `Current Value` = `Potential Transfer Value`
  ) %>% 
  mutate(
    `Remaining Max` = max(cumsum(`Earned TPE`)) - cumsum(`Earned TPE`),
    laggedTPE = lag(`Earned TPE`) %>% replace_na(350), 
    laggedRegression = lag(`Regression`) %>% replace_na(0), 
    Max = accumulate2(laggedTPE, laggedRegression[-1], ~(..1  + ..2) * (1-..3)) %>% round(0),
    No = accumulate2(laggedTPE, laggedRegression[-1], ~(..1  + ..2*0) * (1-..3)) %>% round(0),
    Low = accumulate2(laggedTPE, laggedRegression[-1], ~(..1  + ..2*0.33) * (1-..3)) %>% round(0),
    Mid = accumulate2(laggedTPE, laggedRegression[-1], ~(..1  + ..2*0.66) * (1-..3)) %>% round(0)
  ) %>% 
  select(
    !contains("lagged"),
    -TPE
  ) %>% 
  pivot_longer(
    Max:Mid,
    names_to = "Earner",
    values_to = "TPE"
  ) %>% 
  mutate(
    Salary = 
      case_when(
        TPE <= 350 ~ 1E6,
        TPE > 1700 ~ 6E6,
        TPE > 1550 ~ 5.5E6,
        TPE > 1400 ~ 5E6,
        TPE > 1250 ~ 4.5E6,
        TPE > 1100 ~ 4E6,
        TPE > 950  ~ 3.5E6,
        TPE > 800  ~ 3E6,
        TPE > 650  ~ 2.5E6,
        TPE > 500  ~ 2E6,
        TRUE       ~ 1.5E6
      ),
    Earner = factor(Earner, levels = c("No", "Low", "Mid", "Max"))
  )

knitr::opts_chunk$set(echo = FALSE, results = "asis", fig.height=3, fig.width=6, fig.align='center', fig.pos = "H")

options(scipen = 999)

```

## Proposal for a new Transfer Value Calculation

We have an issue with the current transfer value calculation in that it does not properly take into account the Academy season we have added, resulting in max earning players having a value of over 100 million past their third season and cannot sign elsewhere in FA. The current system also has a relatively reduced cost of a max earner in their peak.

I want to find a new valuation formula that is both simple and gives a decent valuation of a player in all different eras of their career.

## Variables

First I looked at a way to gauge potential and decided to look at a max earner and count the number of seasons remaining that they could be over 1.2k TPE. For instance a S0 player would have 10 seasons at potentially over 1.2k, reaching it for the first time in S5 and having its last season in S14. 

```{r}
data <- 
  sheet %>% 
  filter(
    Earner == "Max"
  ) %>% 
  mutate(
    Over = `TPE` > 1200,
    `Seasons Above 1.2k` = abs(cumsum(Over) - Over - max(cumsum(Over)))
  ) %>% 
  select(
    -Over
  )

data %>% 
  select(
    `Age`,
    `TPE`,
    `Seasons Above 1.2k`
  ) %>% 
  kable(
    format = "latex",
    caption = "The potential number of seasons left at above 1.2k for a max earning player.",
    # table.attr = 'data-quarto-disable-processing="true"'
  ) %>% 
  kable_styling(
    full_width = FALSE,
    latex_options = c("HOLD_position")
  )

```

Then I wanted a way to use the current TPE value of the player, as potential only shows something uncertain. We already have the minimum salary based on TPE tiers, so that was a given to use again. An S0 player starts off at 1 million and is earning 6 million in S8.

```{r}

data %>% 
  select(
    Age,
    TPE,
    Salary
  ) %>% 
  mutate(
    Salary = formattable::currency(Salary, digits = 0L)
  ) %>% 
  kable(
    format = "latex",
    caption = "The minimum salary based on TPE for a max earner.",
    # table.attr = 'data-quarto-disable-processing="true"'
  ) %>% 
  kable_styling(
    full_width = FALSE, 
    latex_options = c("HOLD_position")
  )

```
\newpage
## Valuation formula

So now to find a way to combine these two values, current and potential value. 

- An S0 player would have low value but high potential,
- a peak player (S7-S12) would have high value and mid potential,
- A regressing player (S10+) would have mid-high value and low potential. 

The current formula is shown below:
```{r, fig.cap = "Current formula for transfer value over time for a max earner."}
#| fig-pos: H
data %>% 
  ggplot() + 
  aes(x = Age, y = `Current Value`) + 
  geom_line(linewidth = 1, color = "#BD9523")+ 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar()
  )

```

Using a minimalistic formula of `Minimum Salary * Potential` we get the following graph of a steady rise until S5 and a significant drop when reaching S8. This is in my opinion too quick (and not in the proper range). 

```{r, fig.height=3, fig.width=6, fig.align='center', fig.cap ="A very simple formula consisting of the product of the two variables."}

data %>% 
  mutate(
    formula = (Salary * `Seasons Above 1.2k`) 
  ) %>% 
  ggplot() + 
  aes(x = Age, y = formula) + 
  geom_line(linewidth = 1, color = "#070B51") + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar()
  )

```

Splitting up the two variables could also produce a minimalistic formula. For instance considering the base transfer value of the player being `5*Potential` million, a S0 player would only based on potential be worth $50 million. 

```{r fig.cap = "Transfer value based solely on the potential of the, max earning, player."}

data %>% 
  mutate(
    baseFormula = Salary * `Seasons Above 1.2k`,
    formula = `Seasons Above 1.2k` * 5E6 
  ) %>% 
  ggplot() + 
  aes(x = Age, y = formula) + 
  geom_line(linewidth = 1, color = "red") + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar()
  )

```

The `10 * minimum salary` of the player (assuming max earning) follows a curved trend with the player's age.

```{r fig.cap = "Transfer value based solely on the minimum salary of the, max earning, player."}

data %>% 
  mutate(
    formula = Salary*10 
  ) %>% 
  ggplot() + 
  aes(x = Age, y = formula) + 
  geom_line(linewidth = 1, color = "red") + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar(),
    limits = c(0, 6E7)
  ) 

```

Combining these two trends over time according to `5*Potential million + 10*Salary` would create a transfer value indicated by the red line.

```{r fig.cap = "Proposed formula for transfer value for a max earning player compared to the current and a simple formula."}
data %>% 
  mutate(
    baseFormula = (Salary * `Seasons Above 1.2k`)  %>% as.numeric(),
    formula = (`Seasons Above 1.2k` * 5E6 + Salary * 1E1) %>% as.numeric()
  ) %>% 
  pivot_longer(
    cols = c(`Current Value`, formula, baseFormula)
  ) %>% 
  ggplot() + 
  aes(x = Age, y = value, group = name, color = name) + 
  geom_line(linewidth = 1) + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar()
  ) +
  scale_color_manual(
    "Formulas",
    labels = 
      c("Simple", "Current", "Proposal"),
    values = 
      c("#070B51", "#BD9523", "red")
  )
```

When comparing this to the most simplistic and the current valuation formula we see that the lowest valuation of a player is \$60 million, increasing to just under \$100 million in S5 and finally reducing more slowly than the simple formula. 

## Projections
If we were to take this formula and look at four types of earners:

- No: Nothing earned at all.
- Low: Earning at 33% a season, corresponding to around 3/12 capped TPE and no uncapped TPE.
- Mid: Earning at 66% a season, corresponding to around 8/12 capped TPE and some uncapped TPE.
- Max: Earning everything.


```{r fig.cap="Transfer value over time for different types of earners."}

fullData <- 
  sheet %>% 
  group_by(Earner) %>% 
  mutate(
    Over = `TPE` > 1200,
    `Seasons Above 1.2k` = abs(cumsum(Over) - Over - max(cumsum(Over)))
  ) %>% 
  select(
    -Over
  ) %>% 
  ungroup() %>% 
  group_by(Age) %>% 
  mutate(
    `Seasons Above 1.2k` = max(`Seasons Above 1.2k`)
  )

fullData %>% 
  select(
    Earner,
    Age,
    Salary,
    `Seasons Above 1.2k`
  ) %>%  
  mutate(
    formula = (`Seasons Above 1.2k` * 5E6 + Salary * 1E1) %>% as.numeric()
  ) %>% 
  ggplot() + 
  aes(x = Age, y = formula, group = Earner, color = Earner) + 
  geom_line(
    linewidth = 1
  ) + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar(),
    limits = c(0, 1E8)
  ) + 
  scale_color_manual(
    "Earner",
    values = 
      c("black", "#070B51", "#BD9523", "red")
  )

```

What this does not do is reduce the "base" value of players that have reduced chances of playing above 1200 TPE. For instance a low earner would in S2 according to the formula still have 10 potential seasons of over 1200 TPE (using the max earner values) but in reality they would not have the same amount of potential. 

\newpage

## Alternative proposal
The calculations for adapting the Potential variable as previously defined becomes irritatingly complex very fast. Another way to measure potential is to valuate the player based on the potential remaining career earnings if they were to max earn during a 20 season career.

```{r}

data <- 
  sheet %>% 
  filter(
    Earner == "Max"
  ) 

data %>% 
  select(
    `Age`,
    `TPE`,
    `Remaining Max`
  ) %>% 
  kable(
    format = "latex",
    caption = "The potential number of remaining earnings of TPE for a max earning player.",
    # table.attr = 'data-quarto-disable-processing="true"'
  ) %>% 
  kable_styling(
    full_width = FALSE,
    latex_options = c("HOLD_position")
  )

```

If we were to use this variable as `Potential` the base value of a player could be set as a factor of 2000 multiplied by the potential to get it to the proper range. 

```{r fig.cap = "Transfer value based solely on the potential of the, max earning, player."}

data %>% 
  mutate(
    formula = `Remaining Max`*2E4 
  ) %>% 
  ggplot() + 
  aes(x = Age, y = formula) + 
  geom_line(linewidth = 1, color = "red") + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar()
  )

```

The full formula would be `2000 * Potential + Minimum Salary * 10` resulting in the following trend over time:

```{r fig.cap = "Proposed formula for transfer value for a max earning player compared to the current and a simple formula."}
data %>% 
  mutate(
    formula = (`Remaining Max` * 2E4 + Salary * 1E1) %>% as.numeric()
  ) %>% 
  pivot_longer(
    cols = c(`Current Value`, formula)
  ) %>% 
  ggplot() + 
  aes(x = Age, y = value, group = name, color = name) + 
  geom_line(linewidth = 1) + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar()
  ) +
  scale_color_manual(
    "Formulas",
    labels = 
      c("Current", "Proposal"),
    values = 
      c("#BD9523", "red")
  )
```

The formula projected over the different types of earners sees a diminishing return for No or Low TPE earners almost from the start, while the Mid and Max earners increase their value during their first 7-8 seasons.

```{r fig.cap="Transfer value over time for different types of earners."}

fullData <- 
  sheet 

fullData %>% 
  select(
    Earner,
    Age,
    Salary,
    `Remaining Max`
  ) %>%  
  mutate(
    formula = (`Remaining Max` * 2E4 + Salary * 1E1) %>% as.numeric()
  ) %>% 
  ggplot() + 
  aes(x = Age, y = formula, group = Earner, color = Earner) + 
  geom_line(
    linewidth = 1
  ) + 
  theme_bw() + 
  labs(x = "Age", y = "Value") + 
  scale_y_continuous(
    labels = scales::label_dollar(),
    limits = c(0, 1E8)
  ) + 
  scale_color_manual(
    "Earner",
    values = 
      c("black", "#070B51", "#BD9523", "red")
  )

```


